# -*- coding: utf-8 -*-
"""Lecture 2_Think_Python_Ch1_to_Ch3_Exercises (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mDA3Yt_Om2wvZXnnaIKOkDZqOzH1fdON

## Arithmetic Operators
"""

# Arithmetic Operators
# Python supports basic arithmetic operations:
# Addition (+), Subtraction (-), Multiplication (*), Division (/), Modulus (%), Exponentiation (**)

a = 10
b = 3

print("Addition:", a + b)
print("Subtraction:",a-b ) # Your code from here and on
print("Multiplication:", a*b)
print("Division:", a/b)
print("Floor Division:",a//b )
print("Modulus:",a%b )
print("Exponentiation:",a**b )

"""## Expressions"""

# Expressions
# An expression is a combination of values, variables, and operators that Python can evaluate.

x = 5
y = 2
a = x * (y + 3) # Your code to change a and b to different expressions
b = x * y + 3

print("Expression result: a =", a, " b =", b)

"""## Arithmetic Functions"""

# Arithmetic Functions
# Python provides built-in functions like round() and abs()

value = -7.89627

print("Absolute value:", abs(value))
print("Rounded value:", round(value, 3))

# Your code here

"""## Strings"""

# Strings
# Strings are sequences of characters enclosed in quotes.

greeting1 = "Hello, World!"
greeting2 = 'Hello' + ', ' + "World!"
print(greeting1)
print(greeting2)
print("Length of string 1:", len(greeting1))
print("Uppercase:", greeting2.upper())

# Your code here

"""## Values and Variables"""

# Values and Variables
# Variables store values. Use type() to check the type of a value.

num = 42
text = "Python"
int_num = int("123")

print("Type of num:", type(num))
print("Type of text:", type(text))
print("Convert string to int:", int("123"))
print("Convert string to float:", float("123.456"))
print("Convert float to int:", int(123.456))

# Your code here

"""## Variable Assignments and Statements"""

# Variable Assignments and Statements
# Use = to assign values to variables.

x = 10
y = x + 5
print("Value of y:", y)

"""## Variable Naming Rules and Keywords"""

# Variable Naming Rules and Keywords
# Variable names must start with a letter or underscore and cannot be Python keywords.

# Valid variable names
my_var = 1
_var2 = 2

# Invalid: 2var = 3 (starts with a number)
# Invalid: if = 4 (if is a keyword)

import keyword
print("Python keywords:", keyword.kwlist) # Print out a list of Python keywords

"""## Math Module"""

# Math Module
# Import the math module to access mathematical functions

import math

print("Square root of 16:", math.sqrt(16))
print("Value of pi:", math.pi)
print("Cosine of 0:", math.cos(0))

# Your code here to use math functions. Do what you like!

"""## TypeErrors"""

# TypeErrors
# TypeErrors occur when operations are applied to incompatible types

# Example:
try:
    result = "hello" + "5"
except TypeError as e:
    print("TypeError:", e)

# Fix the error

"""## Comments"""

# Comments
# Use comments to explain code. Comments start with #

# This is a comment
x = 5  # Assign 5 to x
print(x) # Add a comment here

"""# Exercises
# Try these:
# 1. Create a variable and assign it a string.
# 2. Use math.sqrt() to find the square root of a number.
# 3. Write a comment explaining what your code does.

"""

x=("Lebron is my goat ")
print(x)

import math
math.sqrt(16)
print(math.sqrt(16))

comments = "this code explains why i hate stairs"
print(comments)

"""## Functions"""

# Functions
# Functions are reusable blocks of code defined using def

def greet():
    print("Hello from a function!")

greet()

# Your code here to define and call more functions

"""## Parameters and Arguments"""

# Parameters and Arguments
# Functions can accept parameters

def greet(name):
    print("Hello", name)

greet("Alice")

# Your code here to define and call functions with parameters

"""## Calling Functions and Local Variables"""

# Calling Functions and Local Variables
# Variables inside functions are local to that function

def add(a, b):
    result = a + b
    return result

print("Sum:", add(3, 4))

print(result)  # This will raise an error because result is local to add()

# Your code here to define and call more functions with local variables

"""## Loops"""

# Loops
# Use for loops to repeat actions

for i in range(5):
    print("Iteration", i)

# Your code here to define and use more loops

"""
# Loop Through a List
Loop through a list of forces and calculate stress using σ = F / A. Flag any stress that exceeds the yield limit."""

forces = [500, 1000, 1500, 2000]  # in Newtons
area = 0.005  # cross-sectional area in m²
yield_limit = 300000  # in Pascals

for F in forces:
    stress = F / area
    status = "OK"
    if stress > yield_limit:
        status = "Exceeds yield limit!"
    print(f"Force: {F} N → Stress: {stress:.2f} Pa → {status}")

# Modify the code above to add more forces and change area and yield_limit

"""# Print Text"""

print(text[:5]) # NameError: name 'text' is not defined. Need to define 'text' first.

# Fix the error

"""# Final Exercises
# 1. Write a function that returns the square of a number.
# 2. Use a loop to print numbers from 1 to 10.
# 3. Use round() and abs() in a function.

"""

# Code here

# Code here

# Code here